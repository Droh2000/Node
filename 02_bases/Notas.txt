Al inicia ejecutamos el siguiente comando:
    * npm init
Esto nos abrira una serie de pasos para crear el package.json
nos va a empezar a definir los valores que tenga el package.json
Despues de especificar las opciones en la linea de comando, nos generar el archivo que igualmente lo podemos editar desde ahi

Si nos metemos dentro del archivo, en el apartado de Script, en VScode nos daldra para hacer play en el boton de debug, si lo precionamos
nos dara un error porque en este momento nada configurado para testing

Cualquier aplicacion que tenga un package.json significa que es una aplicacion de Node, si lo vemos en frameworks o librerias
que son externas, utilizan node para ayudarnos a nosotros a crear la aplicacion, estos usan Node para la manipulacion de archivos 
para trasformarlos, para aplicar otros patrones

En este archivo podemos especificar cuales son los comandos que podemos usar para que afecten la aplicacion como construirla, levantarla, testearla
crear un comando para diferentes areas, como para levantar la aplicacion a produccion, todos los diferentes procesos lo podemos meter en un comando
asi no tenemos que estar recordando que pasos hacer, solo con ejecutar ese comando se aplicaria todos los pasos.

Dentro del package.json, en una aplicacion de Node el apartado de Scripts es de las primeras cosas que vamos a ver porque aqui nos dice como correr la aplicacion
o si hay alguna comando especial, o para realizar alguna tarea
Otra cosa es que hay que estructurar bien el FileSystem de carpetas en el proyecto, podemos aplicar cualquier tipo de patron 
    * Raiz -> Aqui vamos a tener archivos de configuracion 
    * SRC -> Dentro de esta carpeta vamos a meter nuestro codigo
             El archivo principal se llama Index o App
    
Para ejecutar el archivo tendriamos que ejecutar el comando
    * node src/app.js
Pero para no estar escribiendo ese comando largo, mejor lo configuramos en el archivo package.json en la seccion de Scripts
asi solo tenemos que ejecutar:
    * npm start
(Para que lo de arriba funcione tiene que estar Node instalado de manera global en nuestra PC para que eso se reconosca)

Hay que fijarse que el nombre que le dimos al comando de "start" es especial, ya que si creamos otro con otro nombre no funciona por ejemplo si dentro de "scripts"
        * "dev": "echo 'Hola mundo desde dev'"
Al ejecutar
    - npm dev -> No funcionara

El comando "start" es especial y por defecto funciona para levantar la aplicacion, como recommandacion el "start" hay que usarlo como el que levanta la aplicacion en produccion
y para los demas comandos que creemos tenemos que ejecutarlos de la siguiente manera "npm run NOMBRE_COMANDO"
Asi que para ejecutar el coamdno de ejemplo tenemos:
    * npm run dev

Hay personas que usan los siguientes nombres:
    - "start:dev": "INSTRUCCION"
    - "start:stag": "INSTRUCCION"
Incluso se puede mandar a llamar Scripts desde otros Scripts

Estos comandos de la seccion de "Scripts" son los que usamos para levantar la aplicacion, desplegar la aplicacion, correrla en modo de produccion, testing

Seguimos con la creacion de archivos donde cada uno tenga una unica responsabilidad (aplicando el principio de responsabilidad unica) en donde cada funcion o archivo, haga una cosa y la haga bien
En este caso vamos a crearnos un archivo donde simularemos que nos regrese un Email

Para no estar ante cualquier cambio de nuestro proyecto, estar ejecutando el comando de "npm start", tenemos el paquete de NODEMON
    Nodemon
        Con este le decimos a node que tan pronto detecte un cambio recarge la aplicacion para reflejar las ultimas actualizaciones del codigo
        este paquete lo podemos instalar de manera global en nuestra PC, siempre en los comandos de instalacion que miremos un "-g" significa que a parte de instalarlo de forma global
        tambien tenemos que ejecutarlo en una terminal abierta como Super_Usuario
        
        Para instalarlo de manera local:
            - npm install --save-dev nodemon
        Como resumen podemos usar -D para instalarlo igualmente pero como abreviatura pero tambien si ejecutamos el comando
            - npm install nodemon
        Con el comando de arriba nos instala el paquete en la parte de nuestras dependencias "Esto lo podemos ver en el archivo package.json"
        todos los paquetes que esten dentro de "dependecies" estarian llegando al codigo de produccion de nuestra aplicacion, pero este paquete 
        no esta para ser usado en produccion, si nos sale en ese apartado, hay que volver a ejecutar el comando pero agregandole la "-D", esto nos
        pondra el paquete dentro del package.json en el apartado de "devDependencies", estas dependencias de desarrollo nunca llegaran a produccion

    Otra cosa es que despues de esta instalacion nos saldra la carpeta de node_modules donde estaran las dependencias que usan los paquetes que instalemos
    Esta carpeta puede llegar a pesas Gigas pero hay que fijarnos que solo las dependencias de produccion son las que estarian llegando a nuestra aplicacion 
    final 

    Para mandar a llamar NODEMON nos creamos dentro de "Scripts" el comando para ejecutarlo indicando que este al pendiente del archivo 
    que es el inicio de nuestra aplicacion
        - "dev": "nodemon src/app.js"
    
    Al ejecutar el comando con "npm run dev" tendremos en la consola ante cualquier cambio que guardemos 

    Como constumbre, para explicar a otros desarrolladores como levantar la aplicacion, esto se explica en el archivo README.md donde se especifica los pasos y lo que se tiene que instalar
    ademas de especificar los comandos

Factory Functions
    Para la implementacion de este ejemplo que estamos haciendo requerimos paquetes de terceros (Igual en Node es inevitable usar paquetes de terceros), uno es para generar los IDs
    ademas de otro paquete para calcular la fecha (En la vida real si algo lo podemos obtener directamente usando Js, lo mejor es hacerlo asi para no cargar el proyecto con dependencias
    ya que el chiste es tratar las dependencias al minimo)
        * npm install uuid
        * npm install --save get-age

    Se busca hacer aplicaciones mantenibles, escalables y tolerantes a cambios, esto es lo que busca cualquier principio de arquitectura de software
    A la hora de trabajar con dependencias de terceros, idealmente queremos crearnos algun tipo de capa y proteccion que en este caso se llama el patron adaptador
    en el cual creamos nuestro propio codigo que adapta una dependencia de terceros para que nuestro codigo no depende de codigos de terceros, para cuando queramos
    cambiar de libreria sea facil de remover la que teniamos implementada

Siempre hay que tener bien en claro cuales paquetes vamos a usar, no llenar el proyecto con un monton porque si
ya que con cada paquete agregado hacemos que nuestro proyecto herede problemas que ese paquete tenga, vulnerabilidades, peso, etc
En este caso vamos a cambiar Fetch a Axios

Siempre que tomemos un proyecto de Node de un repositorio de Github debemos de ejecutar el comando
    - npm install
Porque los paquetes del proyecto y la carpeta de node_modules no se suben al repositorio y asi con el comando obtenemos los paquetes necesarios para ejecutar el programa

Node Logger - Winston

    Cuando nuestra aplicacion ya esta montada en algun servidor y de repente algo no sale no sale que esperabamos o nos da errores, podriamos implementar Console.Log, esto esta bien 
    en desarrollo pero cuando estamos en produccion no le podemos dar seguimiento a esto y no podremos encontrar donde ocurrio el error, para esto tenemos el paquete de Winston
    Ademas:
        - Que pasaria si requirimos los Logs en un archivo de texto independiente
        - O si requerimos los Logs en una base de datos para acceder a ellos mas facil
        - o si queremos solo registrar siertos tipos de errores 

    Por lo de arriba el uso de console.log no es eficiente

    Instlacion del paquete
        - npm i winston
    