Aplicacion de motoreo 
    Esto es un sistema que este al pendiente de procedimientos importantes de nuestra aplicacion
    Por ejemplo:
        - Si se cae la BD
        - Algun servicio RESt se cae
        - O GraphQL endpoint 
    Podemos tener un procedimiento que cada cierto este haciendo un chequeo de todo
    en el momento que algo falla, podemos hacer cambios, seremos notificados, muchas cosas

    Aplicaremos Arquitectura Limpia:
        * Para que facilmente podamos cambiar piezas, actualizarlo, las diferentes perosonas del equipo puedan
            trabajar de forma colarivorativa y sepan como funcionan las cosas
    
Sistema de notificaciones (NOC -> Network Operation Center)
    Aqui vamos a poder crear procedimientos que se pueden ejecutar cada Hora, al final del dia, todos los dias, etc
    ese codigo que sera un caso de uso puede ser, el estar pendiente de la BD, conectarse a algun endpoint, verificar que se
    puedan insertar datos, si el Restfull o GraphQL estan activos, si hay problemas con el sistema de autenticacion
    Nos podemos crear esta serie de casos de uso que se ejecuten cuando queramos

Lo que nosotros haremos aqui es:
    - Monitorear una API
    - Crear nuestros propios procesos de monitoreo
    - Enviar Correos

Los Datasources que usaremos para grabar los LOGS donde se registra todo lo que esta pasa es:
    - fileSystem
    - MongoDB
    - PostgreSQL

Un caso que nos puede ocurrir es que nosotros ya tenemos nuestro sistema de NOC donde ya estamos al pendiente de los servicios que nos interesa
y nuestro jefe nos dice que trabajemos nuestros LOGs en "FileSystem" pero luego se le complican las cosas y nos dice que cambiemos a "MongoDB"
pero resulta que MongoDB crece mucho y nos empieza a costar dinero mantenerlo, entonces decidimos pasarnos a "PostgreSQL".
    - Con el hecho de cambiar de una base de datos no relacionar a una relacionar tenemos una serie de problemas que podremos resolver facilmente gracias a la arquitectura limpia
Pero resulta que se nos complica a un nivel en el que nos dicen: Donde quieren seguir trabajar ciertos LOGS en Filesystem y todavia tenemos que trabajar con MongoDB
mientras hacemos la migracion completa a PostgreSQL
    - Aparte queremos estar mandando esta informacion por correo electronico

Vamos a entrar a la arquitectura limpia siguiendo el patron repositorio (Repository Pattern)
    Tenemos que separar toda nuestra logica en capa
    Nosotros queremos conseguir un flujo donde podamos facilmente cambiar facilmente la base de datos o cambiar muy facil aspectos que ve el usuario
    En esta arquitectura vamos a tener:
        - LogEntity: Una entidad puede ser una representacion de lo que vamos a querer meter en la base de datos donde vamos a tener el nivel de severidad, mensaje del suceso
                     y Cuando paso
        - Use Cases: Los casos de uso serian como Grabar Logs, Leer logs por severidad, Enviar Mail
        - Presenters: Capa de presentacion que seria nuestra aplicacion de consola
        - DataBase: La base de datos es donde nuestra informacion sera guardada que serian FileSystem, MongoDB, PostgreSQL

Algunas consideraciones cuando estamos trabajando con algun tipo de arquitectura limpia deberiamos de pensar: No deberia de afectar nuestra aplicacion si:
    - Cambiamos de la base de datos
    - Cambiamos del motor de correo
    - Agregamos o eliminamos tareas
    - Queremos trabajar con multiples origines de datos
Si ocurre alguno cambio en alguna de estas cosas no tiene porque afectar a las demas partes del codigo

Nos vamos a crear un archivo "Entity" que seria como un registro que vamos a manejar en base de datos
"DataSource" Vamos a tabajar con el patros de repositorio donde podemos definir como luce el data source, esta es la informacion de la firma de como nuestro origen de datos se debe de comportar
no importa que tipo de origen de datos tengamos, siempre tendra los metodos que le especifiquemos
"Repository" este habla con el origen de datos donde podamos conectarnos y mandarle un DataSource donde no importa el tipo
"Casos de Uso" estos van a tener acceso al repositorio, donde el repositorio ya viene previemente configurado con el Datasource que va a usar
pero al caso de uso no le va a importar que tipo de base de dato o el DataSource al cual le esta pidiendo que llame sus metodos, el caso de uso solo hace su tarea
y notifica a quien le decimos que tiene que notificar

Crear la aplicacion
    - npm init -y (Creamos el package.json con la configuracion por defecto)
Uso de Typescript de forma simplificada, sin usar Nodemon y mejor usar Ts-Node-Dev que es especializado para TS
    - https://gist.github.com/Klerith/3ba17e86dc4fabd8301a59699b9ffc0b
Ejecutar la aplicacion
    - npm run dev

CRON Task -> Con este paquete podemos hacer que se ejecute cada cierto tiempo el analisis de nuestra aplicacion
    - https://www.npmjs.com/package/cron
Cuando tenemos instalados paquetes de tercero en nuestro proyecto deberia de haber un unico archivo el cual lo utilize, ese sera el que adapte
este paquete para que lo implemenete nuestra aplicacion y asi cuando queramos cambiar de paquete entonces deberia de ser un unico lugar donde tendriamos que hacer cambios
lo que seria la implementacion del Patron Adaptador

Inyeccion de Dependencias
    Vamos a inyectar una dependencia en nuestro caso de uso, estas tradicionalmente se realiza en un constructor, en JS puro se haria con un FactoryFunction que recibe las dependencias
    y luego crea la funcion con las dependencias inyectadas
    Le agregamos dependencias a la clase para que funcione de la forma que esperamos 

    En nuestra clase de "check-service.ts" queremos cuando el caso de uso falla o que accion queremos realizar si el caso de uso funciona exitosamente

Registro de LOGs
    Los Logs unicamente tenerlos en consola no es conveniente, nuestros casos de uso deberian de recibir de alguna manera en donde queremos guardar el LOG, entonces
    tenemos que crear un caso de uso donde tengamos un destino en particular como una base de datos, que en si esto al implementarlo solo seria una inyeccion de dependencias
    (Nuestro caso de uso recibiria esa dependencia para poder funcionar donde le pasariamos una funcion para que grabe en la base de datos)

     Este caso de uso es mas robusto que nos permita tomar los LOGS mandarlos por correo, guardarlos en BD, asi cuando estamos creciendo entonces tenemos que aplicar un principio de arquitectura
     (En un principio de arquitectura tratamos de seguir la idea de la arquitectura pero no implementarla en su totalidad)

Nuestros Datasources es el origen de datos
    Nosotros vamos a empezar con un origen de datos que es de fileSystem, donde estaran los LOGs, Tendremos los Logs y queremos poder tomarlo y grabarlo en FileSystem o tomarlo y grabarlo
    en una base de datos relacionar o no, sea como sea el LOG es el mismo y el mecanismo para grabar en LOG deberia de ser igual sin importar cual origen de datos tengamos
    vamos a poder tener la capacidad de poder cambiar cualquier pieza del codigo sin afectar en cascada las demas partes.

    Aqui estaremos usando el patron repositorio, donde nos vamos a crear un repositorio que le vamos a conectar un data source y el caso de uso llama el repositorio, de esta manera cuando llamemos 
    los casos de uso, estos ya saben cual reposotorio llamar y el resporitorio ya sabe a cual datasource llegar

    Al Repositorio le podemos conectar diferentes Remote Data Source, pudieramos tener varios que se conecten a diferentes fuentes, el repository se va a estar comuncando con nuestros casos de uso
    que seria para Cada caso uso tendria su inyeccion al repositorio
        Asi Fluye:
            Caso de Uso -> Repository -> Data Source

Carpeta Domain:
    Aqui tenemos todo lo que rige el dominio de la empresa (Como va a funcionar, que tipo de datos vamos a tener) toda la parte de reglas de negocios esta aqui
    (Esta seria la carpeta que nos encontramos como Models)
    - "datasources": Va a contener los origenes de datos (Postgrses, MongoDb, Filesystem), el lugar de donde mandaremos y tomaremos los datos
    -  "repository": Es donde vamos a mandar a llamar el DataSource porque nosotros directamente nos llegaremos al DataSoruces sino que mandamos a llamar al Repository

    En la parte de Domain solo son las reglas de como van a funcionar, aqui no hacemos la implementacion a diferencia de la entidad, Solo creamos las clases abstractas o interfaces
    que nos permiten poner las reglas de como queremos que los origenes de datos funcione

Vamos a segurarnos que la clase nos cree los archivos donde vamos a guardar los LOGs
    Queremos implementar el datasource usando el de tipo Filesystem, para esto nos creamos un nuevo directorio
    "Infraestructure", asi tenemos el llamado entre carpetas como nos salen en el explorador:
        Presentacion -> llama -> Infraestructure -> llama -> Domain
    Aqui ya tenemos la logica implementada

Depuracion de la Aplicacion
    * Ponemos un breakpoint en las lineas de codigo que queremos probar
    * Lanzamos la paleta de comandos -> Escribimos: Debug: Debug npm script
    * Elegimos "dev" -> Aqui entra inmediatamente donde pusimos el breack point
        (Damos click en la flecha para ir paso por paso y en el trangulo para ir al siguiente breackpoint que pusimos)

En los archivos de LOGs no queremos que sean ruidosos porque en realidad no guardamos Logs de existo, solo cuando falla algo

Variables de entorno
    Supongamos que en el "esrver.ts" en algun momnto en el tiempo como a media noche  que seria
    un correo electronico con todos los LOS Criticos y como supocicion al empezar el dia se borrarian los LOGs para empezar el dia sin impormacion
    para eso estan las variables de entorno donde tenemos llaves privadas y publicas, configuraciones que van a dependenr segun del ambiente 
    porque en Testing, produccion y desarrollo tengamos ambientes diferentes, la idea es que las variables de entorno las podamos cambiar facilmente 
    segun el entorno y no queremos ir al codigo fuente a hacer las modificaciones de esas variables de entorno
        Lo que solemos cambiar comunmente son credenciales, puertos 
    A las variables de entorno no se les da seguimiento en el repositorio entonces, es por eso que creamos el archivo
        * .env.template
    Donde tenemos las variables que se tienen que definir para que funcione el proyecto, algunas solo especificado el nombre y otras con valores por defecto que puedan tener
    Para acceder a las variables de entorno 
        process.env.VARIABLE
    Lo que pasa es que por defecto no estaran las que definimos nosotros y nos sale undefined y no tenemos el autocompletado
    para solucionar esto tenemos paquetes a nuestra disposicion
        - https://www.npmjs.com/package/dotenv
    Con el paquete de arriba tenemos acceso a las variables de entorno que nosotros definimos con el objeto que mostramos arriba, pero veremos que los valores que no sean String
    nos los esta dando todos como String, este problema se resuelve con este paquete de abajo
        - https://www.npmjs.com/package/env-var
    Este peaquete nos permite hacer validaciones con los datos que definamos en las variables de entorno y ademas para que la aplicacion no se levante si las variables de entorno
    no son las que nosotros esperamos
        (Despues de la instalacion de los paquetes hay que implementarlos con el patron adaptador)
    Asi nos aseguramos que cuando hagamos un deployment a produccion siempre vamos a tener las variables de entorno que nuestra aplicacion requiere, con el tipo de dato que encesita

Correos Electronicos
    Vamos a Refactorizar el codigo 
        Cuando una Entidad cambia nos puede traer problemas dolorosos que desencadenaria una serie de incovenientes en cascada (Gracias a Typescript por indicarnos los errores sabriamos donde 
        tendriamos que cambiar)
    Despues de los cambiamos tendremos incovenientes en todos los lugares donde estamos usando el archivo "log.entity.ts"
    que por ahora solo ocurrio en el caso de uso "check-service.ts" esto es porque en los archivos de la carpeta "datasource" estamos usando la entidad completamenten y como en el "log.repository.impl.ts"
    si no recibieramos la Entidad completa y solo seria el String entonces ahi seria uno de los archivos afectados, que como mandamos la entidad directamente no hay ningun cambio
    todos los cambios ya vienen implicitos (Por eso usamos toda la entidad desde el inicio).

    Preparacion para el envio de correos electronicos
        
        Hay varias empresas que se dedican a enviar correos masivamente, ninguna es gratis aunque tengan una version de kit gratuito por una cierta cantidad por mes, Estos servicios los podemos conectar
        con el paquete de Nodemailer.
        
        En este caso usaremos nuestra cuenta de Gmail para no tener que pagar junto al paquete mencionado, ademas podemos utilizar nuestro correos instucionales si tenemos el dominio SMTP (Para que el 
        correo no se vaya a Spam), el puerto que nos de el Hosting, entre otras configuraciones
        Asi que vamos a mandar un correo autenticado de nuestra cuenta de Gmail y desde nuestra aplicacion de Node

        Vamos a requerir algunas configuraciones donde empezaremos por las variables de entorno, entre esas esta un Secret_Key que google nos dara para poder enviar el correo y asi evitar poner nuestro Password
        de la cuenta

            Configuracion en la cuenta de Google
                Cuenta -> Seguridad (Tenemos que tener activada la verificacion en dos pasos para que esto funcione)
                Acedemos a: https://myaccount.google.com/u/0/apppasswords
                    Establecemos un nivel de acceso a una aplicacion
                        Elegimos: Correo y Otra
                    Esto nos generar un codigo el cual solo lo veremos en ese momento y nunca mas, si lo perdemos tenemos que volverlo a generar:
                        * bebr beew ikzd jkjt -> Este lo ponemos en la variable de entorno, MAILER SECRET KEY sin espacios ni guoines
                    En el caso de borrar, accedemos al mismo link
                En la variable de entorno ponemos el correo
                Hay que asegurarnos que nuestras variable de entorno esten configuradas en: config/plugins/envs.plugin.ts
                y si nos queremos asegurar mas podemos ir a "server.ts" e imprimirlas con:
                    console.log( env.MAILER_SECRET_KEY, envs.MAILER_EMAIL );

        Instalacion de NodeMailer
            * https://www.npmjs.com/package/nodemailer
        (En el momento que instalemos una dependencia tenemos que envolverla para evitar problemas a futuro)
        Tambien hay que saber que si la libreria que estamos instalando no tiene en la pagina de Node el icono de TS azul sino Blanco
        quiere decir que no fue escrito en TS originalmente entonces al importarla nos dara error pero porque tenemos que instalar aparte
        el archivo de definicion

        En este punto como esta el codigo podriamos usarlo perfectmanete con la inyeccion de depdendencia del repositorio en la entidad para enviar mensajes
        pero como estamos trabajando con arquitectura limpia, idealmente quedriamos tener un caso de uso que sea para el envio de correos a personar o LOGS

Resumen de lo que tenemos hecho
    * app.ts -> Este es el inicio de nuestra aplicacion donde manda a llamar el Main
    Carpetas:
        * config -> Aqui agregamos funciones globales
        * domain -> Reglas con las cuales vamos a regir la aplicacion a un nivel macro, alegjandose del Fronted, de las capas externas, seria como el origen de datos, como lucen los modelos
                    las entidades que son las que se relacionan con la BD, el Repository que es el como queremos trabajar con el Datasources, luego tenemos los 
                    use-cases donde dentro tenemos cada una de las logicas que utiliza la aplicacion para ejecutar las tareas que tiene que realizar, como el chequeo para verificar servicios,
                    el de email para enviar los correos y  el de Log para generarlos
        * infraestructure -> Aqui tenemos las implementaciones del acciones Datasources (Aqui es donde ejecutamos toda la logica, donde nos conectamos al origen de datos, lo procesamos, 
                    repuerar los datos y demas) y repository (Nos permite cambiar el datasources facilmente e interactuar con el)
        * presentacion -> Seria la aplicacion de consola, el servidor (Aqui va con lo que va a interactuar el usuario) 
                        Tambien el EmailService lo creamos aqui para que a futuro solo copiemos y peguemos el archivo donde lo queremos usar, ademas podemos hacerle algunas modificacion donde estamos
                        usando la variable de entorno porque tenemos lo que se conoce como dependencia oculta, ya que al usar el EmailService podriamos pensar que no requiere nada externo y si no tenemos
                        vien la variable de entorno nos dara errores y para resolver esto seria que en lugar de tomar de la variable de entorno leyemos los datos desde el constructor y asi los usuarios 
                        saben que tiene que proporcionar.
                        Ademas comentamos su creacion de Logs porque no los estamos usando ya desde el servicio

Manipulacion y cambio de la base de datos MongoDB y PostgreSQL
    En lugar de guardar en Filesystem vamos a hacer que los LOGs se guarden en una base de datos
        - Mongo: Es una base de datos no relacional y para conectarnos con node esta el paquete Mongose que como alternativa tenemos prisma
    Las bases de datos las sacaremos de imagenes Docker para tenerlas ejecutadas las dos al mismo tiempo para poder cambiar entre si facilmente
    asi ademas gracias a la logica de nuestra aplicacion podemos usar las tres formas para almacenar los LOGs    

    En el package.json le agregamos una bandera al script "--clear" para que cada vez que se ejecute un cambio se limpie automaticamente la consola

    Para usar Docker en nuestro proyecto creamos el archivo compose.yml, aqui dentro de este archivo la tabulacion es importante
    Entre las instrucciones que usamos son: 
        - "restart: always" -> Aqui decimos que cuando el dockerDesktop se levante inmediatamente va a levantar esta imagen lista para empezar a trabajar
        - "environtment" -> Configuramos variables de entrono, estas son la configuracion por defecto que queremos cuando la imagen se levante, estas configuraciones
                            las agregamos primero en la variable de entrono para que desde ahi las llame, estas estan entre ${VARIABLE_ENTORNO}
        - "volumes" -> Se crean para que no se nos cree un contenedor y va a insertar la imagen pero cuando destruyamos este contenedor tambien vamos a destruir la Data que guardamos en la BD
                       usulamente queremos bajar y subir la BD sin perder los datos, asi que para eso nos creamos estos Volumenes para que la informacion no la guarde directamente en el disco del contenedor
                       mejor que lo guarde en este volumen que seria como una especie de disco duro externo, en el docker componse le decimos que se creo una carpeta llamado "mongo" y todo se guardara en "data/db" 
        - "ports" -> Como los contenedores estan complementamente sellados, les tenemos que abrir algun puerto para poder comunicarnos con su contenido, solo por medio del puerto indicado es por donde nos vamos a comunicar
                     en mongoDB el puerto por defecto ese el 27017
    
    Probar MongoDB en el contenedor
        En la terminal no vamos a la carpeta de nuestro proyecto
        * docker --version -> Verificar que tengamos docker corriendo
        * docker compose up -> Creamos la imagen que especificamos en el archivo compose
                                Despues de esto verificamos que en el docker desktop este corriendo la imagen
         Si cerramos la terminal, se nos cierra la imagen de docker, asi que mejor ejecutamos el siguiente comando y cancelamos antes el de arriba
        * docker compose up -d
    
    Conectarnos a la BD usamos Mongo DB compass
        Agregamos una nueva coneccion que ya por defecto nos da: mongodb://localhost:27017 que es el mismo puerto que especificamos en Docker, pero tambien le especificamos las credenciales
        en Advance Connection Options y ponemos el mismo usuario y contrasena de las variables de entorno, luego precionamos Save & Connect, la cadena de coneccion que nos da la copiamos y la 
        pegamos en la varibale de entorno MONGO_URL que en alguno lugares usaremos esta coneccion mas facilmente y en otro usaremos el usuario y contrasena
    
    Veremos que en nuestro proyecto se creo la carpeta de mongo que es donde se almacenaran los datos, objetos colecciones, como esto es codigo auto-generado no lo queremos subir al repositorio

    Uso de Mongoose
        Con este paquete creamos una abstraccion de la base de datos y cuando queramos insertar lo hacemos mediante unos objetos de mongoose, de esta forma nos aseguramos de injecciones de SQL
        guardar solo ciertos datos y con el formato que queremos, cuando llamamo la instacia del modelo podemos guardar en la Base de datos

        Si abrimos el "Server.ts" veremos que tenemos el FileSystemDatasource() que esta guardando en Filesystem, nos gustaria quitar esa dependencia y poner MongoDB, con eso podremos sin ninguna otra modificacion
        seguir trabajando en la aplicacion sin ningun problema, la BD no deberia de tener proder sobre la logica de negocio y ser indifirente si cambiamos por una base de datos u otra
        Instalarlo:
            * npm install mongoose --save
        Esto esta escrito en Ts portanto no tenemos que hacer una instalacion extra de archivo de definicion
    
    Para trabajar con Mongo tenemos que crearnos Schemas y Modelos, los Schemas es una forma de conectarnos a una coleccion que seria muy similar a una tabla en una BD relacional y asi podemos guardar datos
    ademas en las no relacionadas podemos trabajar antes de crear las colecciones y documentos, ya directamente con la base de datos

    Despues de todas las modificaciones de codigo si nos vamos al Db Compass
    por defecto se nos crea la base de datos llamada NOC y dentro tenemos un carpeta llamda Logs
    mongoose por defecto cuando usa el modelo toma la palabra que le pasamos entre comillas en ".model('Log')" y la convierte en plural agregandole una S
    dentro de Logs tenemos los registros
    Con esto que hemos visto tenemos que ir a crear un dataSource que implemente el metodo de saveLog y getLog, para despues crearnos un MongoLogDatasource y poder trabajar con Mongo