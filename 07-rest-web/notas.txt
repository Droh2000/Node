WebServer
    Este es un servidor en el cual podemos meter archivos que van a ser servidos mediante un protocolo HTTP/HTTP2/HTTPS
    vamos a ver el como funciona y que es una respuesta (La informacion que es solicitada y como la regresamos)
    Luego usaremos Express para ver como se nos simplifica la configuracion

Para crear el package.json
    * npm init -y
Configuramos TS en Node
    * https://gist.github.com/Klerith/3ba17e86dc4fabd8301a59699b9ffc0b
Ejecutar la aplicacion
    * npm run dev

Cuando hacemos una solicitud en una pagina, un servidor WEB tiene que recibirla y regresarnos lo que le estamos solicitando
el WebServer sabe que hacer basado en los argumentos del URL y en una pagina nos regresa todos los elementos JS, CSS, JSON, Img,
la mayoria los manda en el protocolo Http2.
Tambien cuando estamos en pagina interactivas y escribimos en un buscador algo, al escribir se realizan peticiones HTTP adicionales
que llegan a un endpoint y la informacion de la respuesta que escribimos
Cuando estamos en una pagina web, todo esta basado en Request y response, es decir recargamos el navegador, hacemos una solicitud a la URL
y el servidor nos responde con todo el contenido de la pagina, luego dentro hacemos otra solicitud, escribiendo en la barra de busquedad
    - WebServer: Cuando recargamos el navegador web y nos manda la pagina inicial es un webServer
    - RestServer: Cuando realizamos algun tipo de interaccion que solo llega a cargar sierta parte de la informacion

Diferencias de los diferentes protocoloas HTTP
    - Http: Es el tradicional que usamos
    - Https: Con este tenemos un certificado CSL en la cual los usuarios tienen encriptacion punto a punto, abrir puertos personalizado, etc
    - Http2: Es un nuevo protocolo en el cual podemos mandar informacion y hacer pushes, esto ayuda a los navegadores a manejar el cache, es mas rapido, eficiente 

Aqui configuramos variables de entorno para no mandar en duro datos que puedan cambiar de la aplicacion o cosas que se pueden configurar desde afuera
Hacemos dos instalaciones, una es para establecer y tomar las variables de entorno
    - npm i dotenv env-var

Si queremos desplegar nuestra aplicacion a un WebServer gratuito
    * Configurar correctamente el ".gitignore"
    * Subir a un repositorio de Github
    * En github nos creamos el repositorio
    * En el proyecto escribir un README.md donde indiquemos las instrucciones requeridas para ejecutar el proyecto
    * Agregamos el proyecto al repositorio de github
        Desde Gihub haremos un Deployment de aplicaciones de Node
    * Desplegar en Railway
        Esta es para hacer una prueba, es mas facil crearnos una cuenta y asociarla a la cuenta de Github

RestServer
    Vamos a convertir el webServer a un Rest Server, una de las perticulares de las peticiones REST en un API tradicional es que no tenga estado, es decir no sabemos
    desde donde es llamado el endpoint, la sesion es pasiva, esto nos permite tener muchos usuarios, todos conectados en la aplicacion pero hasta que uno de ellos hace
    la solicitud es donde vamos a emitir esa respuesta (Pddemos tener un alto volumen de perosonas pero su autenticacion es pasiva)

    La parte del Restful API es que es una autenticacion pasiva, es decir cualquier persona puede mandar a llamar al servidor y es en el momento en el cual se hace la solicitud
    en donde el servidor valida todo lo demas
    Aqui vamos a preparar primero nuestra base de datos en memoria, todabia no nos vamos a conectar directamente, ejecutando un CRUD, luego implementaremos la BD

    Ademas tendremos la implementacion de arquitecturas que podriamos pensar que al ver la estructura de carpetas, sea demaciado ya que lo mas dificil de comprender de una arquitectura 
    es ver como se conecta todo entre si

    Recordemos que estamos ejecutando una aplicacion que esta hecha con React que aunque sea un SPA, igual funciona como si fuera una aplicacion generada del lado del servidor
    ya que no importa en que URL estemos, nos esta regesando los datos

    Tendemos la libreria de Express para crear el Restful API, pero esta libreria es "unopinionated" quiere decir que lo podemos programar como mejor nos guste (No estamos obligados a hacer lineamientos)
    pero es comun que se siga el patron MVC